cryptography

History

1. One-time pads
you have a key and a message
map each of the to sequence of numbers between 0-25
add them up and take modulo 26 which will give encoded message
subtraction modulo 26 is the inverse of this

2. pseudo random number generator (PRNG)
A, B - 2 constants
x0 - seed
x1 = Ax0 + B and so on

3. Entropy - number of possible combinations
i. Entropy in one-time pad
To record one letter, we need log2 26 = 4.7 bits
message of size 1000 characters contain 4700 bits or 4700 bits of entropy
ii. Entropy in PRNG
new value depends on old value
no additional randomness added when generating the sequence
it depends only on the seed
entropy is atmost 64 bits
Based on this
One-time pad - truly random if used only once, maximum entropy. but if key is compromised it fails

4. The Enigma Machine
i. rotor mapping was fixed
ii. point at which it starts is the only difference implies 26 offsets for a single mapping
entropy = 4.7
iii. because of the reflector, output could never match the input
with reflector log2 25 = 4.6
iv. double step rotor configuration reduced number of combinations
single stepping: 26 * 26 * 26 = 17576
double stepping: 26 * 25 * 26 = 16900
v. same initial rotor settings for a day
vi. not repeating rotor settings in a month reduces combinations
vii. redundant encoding - easy to crack since same message is encrypted differently you could find patterns
viii. daily plug board configurations
they used day wise or month wise plug board configuration sheet

5. Diffie Helman
i. One time-pad and Enigma machine depend on both sender and recipient having shared secret
ii. 2^x mod 26
(g^a)^b = (g^b)^a = g^(ab)
((g^a mod n)^b) mod n = ((g^b mod n)^a) mod n
when picking a and b we need to make sure g^a mod n does not become zero, or does not repeat itself without reaching all in-between number from 0 to n-1
So we need the following condition for a and b
Fermat's Little Theorem: g^n-1 mod n = 1, if n is prime and g is not a multiple of n
This should not hold true for factors of n - 1
Today's standards 2048 bit prime numbers are considered secure =>  616 digits
It is vulnerable to man in the middle attack
This gives way for Asymmetric cryptography => one key to encrypt and another key to decrypt

Conclusion: Encryption is a matter of making the attacker longer to decipher the message than the message is worth

Cryptographic Algorithms

1. Symmetric
2. Asymmetric
3. Hash functions

Symmetric algorithms

1. Use same key for encryption and decryption

Block ciphers
1. In one-time pad if key length is fixed and message length varies how can we encrypt?
2. Break message into blocks of fixed length. Encrypt each block independently
3. Typical block size 16 bytes = 128 bits
4. We operate in rounds. Part of the key called round key is applied to the round and then other operations are performed on it.
After multiple rounds we get cipher text for that block
5. We derive the multiple round keys from encryption key using a Key schedule which is algorithm that Shift, XOR, Multiple and other operations
on encryption key to come up with the round keys
6. XOR not sufficient since it is one-to-one
7. Repeat operation for each block. This mode of operation is called Electronic Code Book
8. If there is repetition in original message, there will be repetition in cipher text as well
9. Cipher block chaining, we will XOR first block's cipher text with next block's original text before encryption
10. Initialization vector which is random for XORing first block. This diffuses information throughout cipher text
11. We are able to encrypt a message of arbitray length usiing a key of fixed length

Confusion
1. Relationship between key and the cipher text
2. Small change in key -> large change in cipher text

Diffusion
1. Relationship between message and the cipher text
2. Small change in message -> large change in cipher text
3. Hides patterns within the message

Data Encryption Standard (DES)
1. 64 bit key, 8 bits for parity check so it is a 56 bit key length algorithm
2. 3DES - run DES protocol 3 times with 3 different keys. Effective key length is 168 bits. This is slow

Advanced Encryption Standard (AES) - Rijndael algorithm
1. Typically run with 128, 192 or 256 bits key length
2. Works on 16 byte blocks. Organizes on 4x4 matrix of blocks
3. Rounds: key expansion, XOR round key, Substitution, shifting rows and mixing columns
4. Key expansion: Shift, XOR, Multiply to confuse the key. Resulting 16 byte is the round key
5. XOR the round key with block and each byte within the block is passed through S box or Substitution box
6. S box - lookup table with 256 entries each one with a different byte.
7. Shifting rows: move row to the bottom
8. Mixing columns: offset each row by certain number of columns to create new matrix. For example 2nd row by 1, 3rd row by 2 , 4th row by 3.
9. AES-256 considered secure as it provides key confusion and cipher block chaining provides diffusion

Modern cryptanalysis
1. Entropy of Enigma
47.6 bits for plug board (10 pairings)
3 rotors => 4.7 * 3 = 14.1 bits in rotors,
total entropy: 61.2 bits ~ 64 bits
no diffusion in message
little confusion in key

2. Entropy of AES
128-256 bits
Cipher block chaining and Initialization vectors => Good diffusion
Rounds => Good confusion

Compression and encryption

1. Compression algorithms squeeze out redundancy or patterns
2. Encryption masks patterns and adds new information
3. Compression after encryption is not effective
4. Compression before encryption
compression uses redundancy
compression removes patterns
smaller message
more diffused

Error correction and encryption

1. Add checksums to discover errors or even correct errors
2. Combined with encryption adds redundancy and easier to crack
3. Correcting errors at time of transmission does not weaker encryption and is just as effective

Asymmetric algorithms

1. Diffie-Helman is vulnerable to man in the middle attacks
2. Need proof of identity
Means of verification - Public key
Method of proof - Private key

RSA Algorithm

Make up two functions f(x) and f-1(x)
Encrypting exponent e (public key), Modulus n, Decrypting exponent d (private key) such that
m^e mod n = c
c^d mod n = m

((m^e)^d) mod n = m
if n-p*q, p & q are large primes then,
((m^e)^d) mod p = m
((m^e)^d) mod q = m

(m^ed-1)*m mod p = m
(m^ed-1) mod p * m = m
we need (m^ed-1) mod p = 1
(m^p-1) mod p = 1
ed - 1 = h(p - 1)
similarly
ed - 1 = h(q - 1)
implies
ed - 1 = h(p - 1)(q - 1)

choose p and q as primes
choose e as number having no common factor with p - 1 and q - 1
Solve using Extended Euclidean Algorithm

Patterns in RSA Algorithm

1. Since n = pq, m^x mod n has certain patterns
the difference of remainder every p or q steps is divisible by p or q respectively

Discrete Logarithm Problem
1. Inverse of exponentiation within a modulus
Given m, n, m^e mod n then find e
2. Big O of Discrete Logarithm Problem
Need to try every e of size b bits
T(b) =  O(2^b)
3. A Heuristic Quasi-Polynomial Algorithm for Discrete Logarithm in Finite Fields of Small Characteristic*
if n = q^2k then T(b) = b^(O (log b))
This does not hold true for Diffie Helman (n is prime) or RSA algorithms (n = pq, product of primes)

Elliptic curve cryptography

1. Elliptic curve equations
2. Properties
A non-vertical line intersecting 2 points also intersects a third point
No line intersects at more than 3 points
The curve is symmetric along X-axis
Example: y^2 = x^3 + 3x + 5
3. Algorithm
Procedure:
Given A0, A1 find 3rd intersection point and take reflection as A2
Given A0, A2 find 3rd intersection point and take reflection as A3
Given A1, A3 find 3rd intersection point and take reflection as A4 and so on
Problem:
Given A0, A1, n find An - (easy-ish to solve)
Given A0, A1, An find n
Only way to do this is iteratively n times till you reach An
4. We can use this equation to find public & private key pairs
restrict x & y to integers
find those solution within a modulus p which is a large prime number
private key - n
public key - An
5. Supports much smaller key lengths
163 to 359 bits (~10^49 to 10^108)

Use of algorithms
1. Confidentiality
Encrypt a message
Encrypt symmetric key with public key
Confidence that only recipient can read it
2. Authenticity
Guarantee the source
Digest of message (hash) - h1
Encrypt digest with private key (signature)
Recipient can compute same hash - h1
Decrypt signature with public key - h2
If h1 equals h2 then signature is valid

Hash functions for Authenticity
1. CRC-32
Cyclic Redundancy Check produces 32 bit number
Summation x^i from i=0 to 32 mod 2^33
This is easily reversible
Multiple inputs can give same 32 bit number
Intended for error detection (check sum)

Cryptographically Strong Hashing Algorithms
1. MD5 uses block cipher methods
2. SHA-1
160 bit hash
3. SHA-2 family of hashes
SHA-256
SHA-512
3. SHA-3
Keccak
224 to 512 bits

Birthday Attack
1. What is the probability two people in a room of 20 share the same birthday
P(same birthday) = 1 - P(unique birthday)
P(same birthday) = 1 - (365/365)*(364/365)*...*(346/365) = 41.1%
2. We could be asked to sign someone else' document such that the hash is same and document could be replaced since both have same signature
Never sign someone else's document
Always append randomness to the hash

Identitiy
1. How to trust public key that we receive from someone?
Direct key exchange - Self
Community - Web of trust
Authorities - Vouch for identity, Chain of trust (one person can then validate another person's identity by signing public keys)

APIs in Java

1. Java Cryptography Extensions (JCE)
Symmetric cryptography: KeyGenerator -> SecretKey
Secure RNG: SecureRandom, IvParameterSpec (Initialization Vector for block ciphers)
keys in IV create Cipher, Signature -> CipherInputStream CipherOutputStream

2. Confidentiality with JCE
Asymmetric cryptography: KeyPairGenerator -> PublicKey PrivateKey
Secure RNG: SecureRandom, IvParameterSpec (Initialization Vector for block ciphers)
keys in IV create Cipher, Signature -> CipherInputStream CipherOutputStream
init Cipher with PublicKey
doFinal to encrypt message and get cipher text
Recipient gets instance of Cipher and init with PrivateKey
doFilal to decrypt message and get original text

3. Authenticity with JCE
initSign Signature with PrivateKey
update Signature
Recipient initVerify Signature with PublicKey
update Signature

Transport Layer Security
1. Ensure confidentiality and authenticity of data in flight
2. TLS is based on X509 certificates
3. My certificate signed by Intermediate CA which is signed by Root CA which is self signed
Root CA is trusted by Browser
Create chain of trust
Root CA verifies Intermediate CA
Intermediate CA verifies me
I cannot verify anyone
I cannot be verified by Root CA directly

Public key cryptography standards
1. PKCS#7
Cryptographic message syntax
way of exchanging certificates
2. PKCS#10
way of exchanging certificate requests
3. PKCS#12
way of storing personal information such as private keys

Common file formats
1. .key file for RSA private key
openssl genrsa
2. .csr file for Certificate signing request
openssl req
3. .cer file that CA gives us after they have granted our Certificate signing request
4. .pem file called Privacy Enhanced Mail
Above three file formats are usually store in a .pem file
Text based format for exchanging keys that the PKCS built upon
5. .pfx file which is pkcs12 file stored as binary
openssl pkcs12
it stores Certificate and private key associated with that certificate

OpenSSL
1. Generate RSA key pair
openssl genrsa => generates key using 512 bit long modulus
openssl genrsa 2048 => generates key using 2048 bit long modulus
openssl genrsa -aes256 2048 => encrypts private key using aes256 encrypting. need to enter a pass phrase
openssl genrsa -aes256 -out private.key 2048 => writes a private key that is aes256 encrypted into a file
openssl rsa -in private.key -out naked.key => creates naked key meaning one without requiring pass phrase to decrypt. need to enter a pass phrase
2. Generate Certificate Signing Request
openssl req -new -key private.key -days 365 -out crypto.csr => generates a Certificate Signing Request using private key which is valid for 365 days.
need to enter pass phrase to decrypt the private key
openssl req -text -in crypto.csr => display CSR as text
Send my CSR to CA. They'll validate my identity and they'll send me back a certificate (.cer) file
3. Certificate file
openssl x509 -in crypto.cer -text => display CER as text
4. Generate PKCS12 personal information file
openssl pkcs12 -export -in crypto.cer -inkey private.key -out crypto.pfx => creates file that combines Certificate and private key associated with that certificate.
need to enter pass phrase to decrypt the private key.
need to enter another pass phrase to encrypt the key inside of the pfx file
This is not in pem format
This file can be used in IIS and Tomcat
5. Configure in Tomcat
vi tomcat*/conf/server.xml => open tomcat's server.xml file
Define connector
port=8443
SSLEnabled=true
keystoreFile=/path/to/crypto.pfx
keystorePass=password_to_encrypt_key_inside_pfx_file
keystoreType=PKCS12

Authentication
1. Passwords
Problems: Reuse, Dictionary words, Not enough entropy
Attacks: Online attacks, phishing (can be solved by cryptography through authenticity), social engineering, key loggers
Offline attacks: through Read-only access to database or SQL injection
How can we prevent attacker from getting into user accounts if he gets access to our user-password database?
2. Hashed passwords
if not hashed, attacker has direct access to all accounts
Store username-hashed password
Problems: same password => same hash, attacker can run offline dictionary attack to retrieve password
Dictionary attack => take common words in dictionary, calculate hash and check if it matches with given hash
usually they take pre-computed list of hashes for dictionary words, put them in a table hash->word to retrieve password much quicker
3. Rainbow Tables
Pre-computed hash table takes lot of space
Hash function => text -> binary
Retry function => binary -> text
form a chain of these functions. continue this process for a known number of iterations say 10,000. for each text, we've computed hash
store first text (starting point) and last binary as entry in rainbow table
run this process for user's password, get the last binary. check if the binary is present in rainbow table
there is a good probability that user's password is present in the 10,000 words for which we have the first text (starting point) in rainbow table
Problem: if there is hash collision, even if text is different, since hash matches it will authenticate attacker into the site
How to protect against rainbow table attacks?
4. Salted passwords
salt the hash, very similar to initialization vector. add random input to hash function
append random string to password and run hash function over the entire string (password + salt)
a pre-computed rainbow table has all the same inputs. so mixing some randomness into hash function as an input so that attacker cannot pre-compute all its values
salt need not be protected
salt needs to be different for each user and has to be stored for validating as well
Rainbow tables are not effective on salted passwords but dictionary attacks are
To help from dictionary attacks we need to ask user to set stronger passwords i.e. passwords with high entropy
5. Computing password entropy
Number of bits in a message
H = L log2 N
L - length of text
N - size of alphabet (26 for English)
for 10 letter word, H = 10 log2 26 = 47
If we consider the natural language say English as alphabet, then N is number of words in English, L is number of such words used in password
20_000 < N < 1_000_000 for average user
14 < log2 N < 20
E.g. correct horse battery sample
H = 4 log2 20000 = 56
i. Common substitutions: 0=o, 1=l,i, 3=e
H = number of characters * log2 size of substitution dictionary
ii. Dictionary words:
H = number of words * log2 size of dictionary
iii. Capitalization
1 bit for each different capital not at beginning of a word
iv. Remaining characters
H = number of cahracters * log2 size of alphabet
6. Password based key derivation functions (PBKDF) or password hashes
If we protect passwords from above attacks all that is left is brute force
How do we make brute force attacks take longer time for attacker to crack the password?
Intended for deriving symmetric key and IV from a password. can be used to generate salted hash. This can slow down an offline attack
Key stretching
Divide password into blocks. Run hash function for each block
Take output block and run it through has function again. Each time you compute a hash, XOR it with previous iterations
After running a few thousand times, we get output for that block. Get output for each block and XOR to get a result which will be the salted hash
We have to do this only once for user when he logs in
Attacker will have to do this for every password they try in brute force attack
Number of iterations should be atleast 1000
7. Progressive salted hashed passwords
Store username,hashed password,salt,algorithmId in user table (foreign key)
Store algorithmId, algorithm, number of iterations in algorithm table
With this data structure we can migrate over time by rehashing as user logs in
First authenticate the user using existing algorithmId, then re-compute password hash with updated algorithm and make update in user table
We are keeping enough information for any system to validate passwords
But this gives extra information regarding algorithm we used to password hash.
Attacker still has to brute force several combinations so it is not nearly enough information for attacker
8. Federation
Remove the responsibility of identity from applications and gives that to other providers
Separate authentication from authorization
Based on trust among multiple parties
Separation of responsibilities: who you are (Authentication), what you can do (Authorization), getting the job done (Application)
Identity Provider (IP) performs authentications. We have centralized identity management
Secure Token Service (STS) performs authorization. We have single repository of roles and responsibilities
Relying party (RP) consumes token and acts on those claims. Focus on business logic
Sometimes IP can also be IP-STS or STS can be RP-STS
9. Kerberos to implement Federated authentication and authorization
User registers with password to Kerberos. Kerberos generates symmetric key using the password using PBKDF
User later asks for token, kerberos encrypts token using symmetric key and sends to user
User knows password, so client can generate symmetric key and decrypt the token
Kerberos (IP) signs the token so that user can present it to other services to get other tickets
This ticket is called Ticket Granting Ticket (TGT)
Other service trust this ticket and they perform authorization
Kerberos is used in OS
10. WS-Trust and WS-Federation
Defines protocol and XML Schema for SOAP web services to exchange security tokens
SAML
11. OAuth
Social applications
Delegate access to services
12. OpenID Connect
Built on top of OAuth

NONCE - Number used once - Used to protect against replay attacks
