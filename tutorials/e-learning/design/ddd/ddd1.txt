domain driven design

1. Used in applications with business domain complexity as opposed to technical complexity

Benefits of DDD
1. Flexible
2. Customer's vision/perspective of the problem
3. Path through a very complex problem
4. Well-organized and easily tested code
5. Business logic lives in one place
6. Many great patterns to leverage

Drawbacks of DDD
1. Time and effort
Discuss and model the problem with domain experts
Isolate domain logic from other parts of the application
2. Learning curve
New patterns
New principles
New processes
3. Only makes sense when there is business domain complexity in the problem
Not suitable for CRUD or data-driven applications
Not suitable for problems with technical complexity without business domain complexity
4. Team or Company buy-in to DDD

Example: Pet clinic application
Client schedules Appointment
Appointment requires Resources like Exam Room, Doctor
Appointment can be of type Office visit or Vaccination
Another type of Appointment is Surgery which has Procedures
Surgery requires Resources like Operation Room, Recovery room

Explicitly define the context within which a model applies.
Keep the model strictly consistent within these bounds but don't be distracted or confused by issues outside
Distinct data/code/team per bounded context
Introduce separation through namespaces, folders, projects
Bounded context is shaped to fit the sub-domain
Client in Appointment domain is different from Client in Billing domain

Context Maps
Appointment scheduler: Client, Notification, Patient, Exam, Room Appointment
Billing: Client, Procedure, Invoice, Notification
Shared Kernel: User authentication (consists of shared domain models)

Ubiquitous language
single shared language that everyone understands
for a single bounded context, used throughout that context, from conversations to code

Problem domain: Specific problem the software is trying to solve
Core domain: Key differentiator for customer's business
Sub domain: Separate applications or features that software must support or interact with
Bounded context: Specific responsibility, explicit with boundaries that separate it from other parts of the system
Context mapping: Identifying bounded contexts and their relationships to one another
Shared kernel: Part of the model that is shared by two or more teams who agree to not change it without collaboration
Ubiquitous language: Using terms from the model that programmers and domain experts use to discuss the system

Anemic Domain Models
Model with classes focused on state management. Good for CRUD
Rich Domain Models
Model with logic focused on behavior not just state. Good for DDD
Entity
A mutable class with an identitiy (not tied to it's property values) used for tracking and persistence
Immutable
A type whose state cannot be changed once the object has been instantiated
Value Objects
An immutable class whose identity is dependent on the combination of its values
Services provide a place in the model to hold behavior that doesn't belong elsewhere in the domain
Side effects are changes in the state of the application or interaction with the outside world other than the main intent of the operation E.g. infrastructure

Aggregates consist of one more entities or value object that change together
Aggregate root is the parent object of all members of the aggregate
Data changes to aggregate should be ACID
Aggregate should follow invariants
Invariant is a condition that should always be true for system to be in a consistent state
Aggregate root is one one deleting will lead to deleting all members of the aggregate by cascading effect
Aggregate member can only be reference by it's aggregate root
Aggregate root can be referenced by other aggregates
Aggregate can use references (Foreign key references) instead of aggregate members to reduce dependencies

Aggregate is a transactional graph of objects
Aggregate root is the entry point of an aggregate which ensures the integrity of the entire graph
Invariant is a condition that should always be true for the system to be in a consistent state
Persistence Ignorant classes are classes that have no knowledge about how they are persisted

Repository
Object life cycles
i. No persistence: Create, Do stuff, Destroy
ii. With persistence: Create, Reconstitute from persistence, Do Stuff, Save changes to persistence, Destroy
Repositories are used to manage life cycle of persistent objects
Think of it as an in-memory collection
Implement a known, common access interface
Methods for add, remove and defined criteria for object selection
Repositories for aggregate roots
Client focuses on the model, the repository focuses on the persistence
Common repository blunders
N+1 query errors
Inappropriate use of eager or lazy loading
Fetching more data than required

Repository is a class that encapsulates the data persistence for an aggregate root