//Jenkins file
//
//Scripted (Groovy to Declarative)
//
//Credentials, Checkout SCM and Configure Jenkinsfile for pipeline on Jenkins GUI

def gv
pipeline {
    agent any
    tools {
        // access build tools like maven, gradle, jdk, yarn to use in scripting steps
        maven 'Maven'
        gradle
        jdk
    }
    parameters {
        // parameters to select when running a job
        string(name: 'VERSION', defaultValue: '1.0.1', description: 'version to deploy on prod')
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: '')
        booleanParam(name: 'executeTests', defaultValue: true, description: '')
    }
    environment {
        NEW_VERSION = '1.3.0'
        SERVER_CREDENTIALS = credentials('credentialId') // requires Credentials Binding plugin to use credentials function
    }
    stages {
        stage("init") {
            script {
                // groovy script here
                gv = load 'script.groovy'
            }
        }
        stage("build") {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    gv.buildApp()
                }
                echo 'building the application'
                echo "building version ${NEW_VERSION}"
                sh "mvn clean install"
            }
        }
        stage("test") {
            when {
                expression {
                    params.executeTests == true
                }
            }
            echo 'testing the application'
        }
        stage("deploy") {
            echo 'deploying the application'
            echo "deploying with ${SERVER_CREDENTIALS}"
            //or
            withCredentials([
                    usernamePassword(credentials: 'server-credentials', usernameVariable: USER, passwordVariable: PWD)
            ]) {
                sh "some script ${USER} ${PWD}"
            }
        }
        post {
            always {
                // always executes - like sending email
            }
            success {

            }
            failure {
                // send build status
            }
        }
    }
}