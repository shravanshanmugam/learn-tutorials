Elastic stack
-------------

Github Workshop  - https://github.com/LisaHJung/Beginners-Crash-Course-to-Elastic-Stack-Series-Table-of-Contents

search, analyze and visualize data
full text search engine

Use cases
---------
Logging
Metrics
Security Analytics
Business analytics

Elastic stack
-------------
beats
logstash
elastic search
kibana

Elastic search - Store, search and analyze
speed and relevance of search
no schema. unstructured data
built on top of lucene

Kibana - Search, View and interact
Visualize and Manage data

Elastic search
--------------
1. node - member in cluster
2. cluster - multiple node
3. Document - store as unstructured data
4. Index - group of similar documents - virtual thing which keeps track of document location
can't find index on disk
5. Shard - data is stored
i. let's say we have 3 nodes in a cluster. one node can hold only 200k docs. we need to store 600k docs
add multiple shards for index to distribute among nodes
with increasing data, scale horizontally by adding more nodes and shards
ii. let's say we want to search on index containing 500k docs for pink lady apples
on single node, single shard cluster it takes 10s
on multi node cluster with 10 nodes, 10 shards. each shard holds 50k docs. it takes 1sec per shard.
since search on each node happens in parallel it takes ~1sec to search
6. replicas - for each shard
improve read performance
durable and reliable
primary and non-primary replica shards
i. on multi node cluster with 4 nodes, 2 shards.
p0 & p1 - primary replica shards on node 1 and 2
r0 - replica shard of p0 on node 3
r1 - replica shard of p1 on node 4

7. relevance
true positive - relevant and returned
false positive - not relevant but returned
true negative - not relevant and not returned
false negative - relevant but not returned

i. precision - what portion of retrieved data is relevant to query
precision = true positive/(true positive + false positive)

ii. recall - what portion of relevant data is returned as search result
recall = true positive/(true positive + false negative)
precision and recall are inversely related
precision wants all documents to be relevant
recall wants as many documents even if not relevant
precision and recall determine which documents are included in search results
precision and recall do not determine which of the returned documents are more relevant than others

iii. ranking - ordering of results
most relevant - high score
score is computed for each document that is a hit
a. Term frequency
how many times each term appears in a document
high tf computes higher score
b. Inverse document frequency
diminishes the weight of terms that occur very frequently in document set and increase the weight of terms that occur rarely

