Root index i, then left node is 2i+1 and right node is 2i + 2

1. Pre-order traversal - root, left subtree, right subtree
Using stack
i. Push root to stack
ii. while stack not empty, pop from stack
iii. if right subtree exists, push to stack
iv. if left subtree exists, push to stack
v. add current node to list
Idea: Push right, left and pop one at a time

2. Inorder traversal - left subtree, root, right subtree - sorted order for binary search tree
Using stack
i. while current node not null and stack not empty
ii. go to leftmost leaf node and push each node to stack
iii. pop from stack
iv. add current node note to list
v. go to right subtree
Idea: Go to left most node and then go to right subtree

3. Post-order traversal - left subtree, right subtree, root - used for mathematical expressions
Using 2 stacks
i. Push root to stack
ii. while stack not empty, pop from stack
iii. push to second stack
iv. if left subtree exists, push to stack
v. if right subtree exists, push to stack
vi. while second stack not empty, pop from stack and add to list
Idea: Push root, right, left and pop one at a time

4. Breadth first search - Level order traversal
Using queue
i. push root to queue
ii. while queue not empty, while row size is positive, poll from queue
iii. if left subtree exists, push to queue
iv. if right subtree exists, push to queue
v. add current node to row
vi. decrement row size
vii. add row to resulting list

Recursion

I. Top-down approach - similar to pre-order traversal
1. return specific value for null node
2. update the answer if needed                      // answer <-- params
3. left_ans = top_down(root.left, left_params)      // left_params <-- root.val, params
4. right_ans = top_down(root.right, right_params)   // right_params <-- root.val, params
5. return the answer if needed                      // answer <-- left_ans, right_ans

Example - maximum depth of binary tree
1. return if root is null
2. if root is a leaf node:
3.     answer = max(answer, depth)         // update the answer if needed
4. maximum_depth(root.left, depth + 1)     // call the function recursively for left child
5. maximum_depth(root.right, depth + 1)    // call the function recursively for right child

II. Bottom-up approach - similar to post-order traversal
1. return specific value for null node
2. left_ans = bottom_up(root.left)      // call function recursively for left child
3. right_ans = bottom_up(root.right)    // call function recursively for right child
4. return answers                       // answer <-- left_ans, right_ans, root.val

Example - maximum depth of binary tree
1. return 0 if root is null                 // return 0 for null node
2. left_depth = maximum_depth(root.left)
3. right_depth = maximum_depth(root.right)
4. return max(left_depth, right_depth) + 1  // return depth of the subtree rooted at root

