Processing order - Last-in-First-out (LIFO)
Push at end of stack
Pop from top/end of stack

Depth first search

1. What is the processing order of the nodes?

In the example above, we start from the root node A.
Firstly, we choose the path to the node B and trace-back til we reach the node E where we have no way to go deeper.
Then we backtrack to A and choose the second path to the node C. From C, We try the first path to E but E has been visited.
So we go back to C and try another path to F. Finally, we find G.
Overall, we only trace-back and try another path after we reach the deepest node.

2. What is the push and pop order of the stack?

As shown in the animation above, we first push the root node to the stack; then we try the first neighbor B and push
node B to the stack; so on and so forth.
When we reach the deepest node E, we need to trace back.
And when we trace back, we will pop the deepest node from the stack which is actually the last node pushed to the stack.
The processing order of the nodes is the exact opposite order as how they were added to the stack, which is Last-in-First-out (LIFO).
That's why we use a stack in DFS.

Examples: traversal or find path

DFS to find path using recursion pseudocode

/*
 * Return true if there is a path from cur to target.
 */
boolean DFS(Node cur, Node target, Set<Node> visited) {
    return true if cur is target;
    for (next : each neighbor of cur) {
        if (next is not in visited) {
            add next to visted;
            return true if DFS(next, target, visited) == true;
        }
    }
    return false;
}

DFS using stack pseudocode

/*
 * Return true if there is a path from cur to target.
 */
boolean DFS(int root, int target) {
    Set<Node> visited;
    Stack<Node> stack;
    add root to stack;
    while (s is not empty) {
        Node cur = the top element in stack;
        remove the cur from the stack;
        return true if cur is target;
        for (Node next : the neighbors of cur) {
            if (next is not in visited) {
                add next to visited;
                add next to stack;
            }
        }
    }
    return false;
}

Monotonic Stack
1. It is a "range queries in an array" problem.
2. The minima/maxima element or the monotonic order of elements in a range is useful to get answer of every range query.
3. When a element is popped from the monotonic stack, it will never be used again.