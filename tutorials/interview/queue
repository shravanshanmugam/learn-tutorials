Processing order - First-in-First-out (FIFO)
Enqueue at end of array
Dequeue from front of array. Shift starting pointer. This will lead to wasted storage.
Circular queue - Fixed-size array and 2 pointers for starting and ending position. Reuse wasted storage

Breadth first search

1. What is the processing order of the nodes?
In the first round, we process the root node. In the second round, we process the nodes next to the root node; in the third round,
we process the nodes which are two steps from the root node; so on and so forth.
Similar to tree's level-order traversal, the nodes closer to the root node will be traversed earlier.
If a node X is added to the queue in the kth round, the length of the shortest path between the root node and X is exactly k. That is to say, you are already in the shortest path the first time you find the target node.

2. What is the enqueue and dequeue order of the queue?
As shown in the animation above, we first enqueue the root node. Then in each round, we process the nodes which are already in the
queue one by one and add all their neighbors to the queue. It is worth noting that the newly-added nodes will not be traversed immediately
but will be processed in the next round.
The processing order of the nodes is the exact same order as how they were added to the queue, which is First-in-First-out (FIFO). That's why we use a queue in BFS.

Examples: traversal or find shortest path

BFS to find Shortest path using queue pseudocode

/**
 * Return the length of the shortest path between root and target node.
 */
int BFS(Node root, Node target) {
    Queue<Node> queue;  // store all nodes which are waiting to be processed
    int step = 0;       // number of steps neeeded from root to current node
    // initialize
    add root to queue;
    // BFS
    while (queue is not empty) {
        step = step + 1;
        // iterate the nodes which are already in the queue
        int size = queue.size();
        for (int i = 0; i < size; ++i) {
            Node cur = the first node in queue;
            return step if cur is target;
            for (Node next : the neighbors of cur) {
                add next to queue;
            }
            remove the first node from queue;
        }
    }
    return -1;          // there is no path from root to target
}